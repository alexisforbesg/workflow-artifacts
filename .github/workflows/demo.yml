name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      # cache dependencies to not install if nothing has changed
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          # cached paths to files that should be cached
          # the npm created cache running npm ci should be stored in some github server and reused in other jobs
          path: ~/.npm
          # used for retrieving cache and recreating folder on the runner machine
          # indicates if it should be discarted or recreated if some dependency changed
          # creates unique hash value based on path provided
          # will change when contents change
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      # name is up to us
      # steps context value with info about our steps
      # we need to set an id for the step we want to access
      script-file: ${{ steps.publish.outputs.script-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        # it uses the same central cache directory for each job to be reused across execution cycles
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
        # job outputs: name variables available to use in other jobs
      - name: Publish JS file name
        id: publish
        # linux command: finds js file and prints its name
        # to set an output value, choose name 'script-file=' '{}' value accessible under output name
        # >> $GITHUB_OUTPUT targets a special file in the env in which job runs, where output keyvalue pair is written to
        # sets the output for this step
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
        # to make it available we need to create an output in top level definition 'outputs' key
        # store dist folder as an artifact produced by build job
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist-files
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # download artifacts
      # they exist in a different machine
      - name: Get build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist-files
      - name: Output contents
        # example of using data between jobs
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Output contents
        # lists all items in the folder we currently are
        run: ls
      - name: Deploy project
        # takes artifacts and uploads them to a hosting provider
        run: echo "Deploying..."
